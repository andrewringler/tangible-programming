#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('VRS:server');
var http = require('http');
var osc = require('osc');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP and WebSocket server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/* OSC Integretaion over UDP
*/
var udpPortSend = new osc.UDPPort({
    localAddress: "0.0.0.0",
    localPort: 57121
});

udpPortSend.on("ready", function () {
    console.log("Listening for OSC over UDP.");
    //udpPortSend.send({address:"/height", args: [0, 255, 0] }, "127.0.0.1", 57122);
});

var control;
var prevMsgString;
io.on('connection', function (socket) {
    console.log("NEW SOCKET")

    udpPortSend.on("message", function (oscMessage) {
        var msgString = JSON.stringify(oscMessage);
        if (msgString != prevMsgString) {
            var allPins=[];
            for(var i=0; i<oscMessage.args.length-1; i+=2 ) {
                var touchPin={};
                touchPin.index = oscMessage.args[i];
                touchPin.indent = oscMessage.args[i+1];
                allPins.push(touchPin);
            }
            console.log(allPins);
            socket.emit("touch", allPins);
            prevMsgString = msgString;
        }
    });

    udpPortSend.on("error", function (err) {
        console.log(err);
    });

    udpPortSend.open();

    /**
    * Handle Socket.io events
    */
    //Storing control obj here [hack]

	//Send update Message
	socket.on('P', function (data) {
		udpPortSend.send({address:"/height", args: data }, "127.0.0.1", 57122);
        //console.log('U: %s', JSON.stringify(data));
	});
});


/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
