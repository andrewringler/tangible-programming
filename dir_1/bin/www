#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('VRS:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP and WebSocket server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Handle Socket.io events
 */
//Storing control obj here [hack]
var control;
io.on('connection', function (socket) {


	//Send update Message
	socket.on('update', function (data) {
		io.emit('apply',data);
        //console.log('U: %s', JSON.stringify(data));
	});

  //Move Player camera
  socket.on('move', function (data) {
      io.emit('movePlayer',data);
      //console.log('MOV: %s', JSON.stringify(data));
  });

  //Rotate Player camera
  socket.on('rotate', function (data) {
      io.emit('rotatePlayer',data);
      //console.log('ROT: %s', JSON.stringify(data));
  });

  //Store control config to be sent when remote connects
  socket.on('controlGUI', function(data){
      control = data;
      console.log("Control fncts " + JSON.stringify(control));
  });

  //Send control config to remote
  socket.on('config', function(data){
    io.emit('init', control);
  });
});


/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
